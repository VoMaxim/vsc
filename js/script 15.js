'use strict'

console.log('arr' + " - object");
// итог = arr - object
console.log(4 + " - object");
// итог = 4 - object
console.log(4 + +" - object");
// итог = NaN(not a number), в данном случае мы выполняем действие, которое не подлежит математичской логике: 4 + +строка
console.log(4 + +"5");
// итог = 9: 4 + 5, пятерка в кавычках из строки превратилась в число за счет УНАРНОГО ПЛЮСА
// УНАРНЫЙ ПЛЮС - это + который стоит перед чем-то: +"5", +prompt("Вам есть 18?", "18"); называется так, потому что использует только один аргумент для своей работы
// _______________________________________________________________________________________________________________________
//        операторы ИНКРЕМЕНТА и ДЕКРЕМЕНТА

let incr = 10,
  decr = 10;

// incr++; - оператор инкремента (увеличение на 1)
// decr--; - оператор декремента (уменьшение на 1)

incr++;
decr--;

// ++incr - префиксная форма записи              incr++ - постфиксная форма записи
// --decr - префиксная форма записи              decr-- - постфиксная форма записи

console.log(incr);
console.log(decr);
// итог: 11 у инкремента и 9 у декремента
// ___________________________________________________________________
let incr1 = 10,
  decr1 = 10;

console.log(incr1++);
console.log(decr1--);
// итог: 10 и 10, так как мы сразу использовали операторы внутри команды в постфиксной форме, то инкремент и декремент возвращают сначала старое значение: 10

let incr2 = 10,
  decr2 = 10;

console.log(++incr2);
console.log(--decr2);
// итог 11 и 9, так как использовали префиксную форму
// Заключение: постфиксная форма сначала возвращает старое значение, а потом увеличивает, а префиксная сразу производит изменения
// _________________________________________________________________________________
// пример работы опреатора %
console.log(5 % 2);
// данный оператор выводит остаток после деления 5 на возможное количество раз, то есть 5ку можно поделить два раза на 2, и остается 1, вот этот остаток и выводит %
// ____________________________________________________________________________________
// если используем знак = это присваивание, если используем два знака == - сравнение

console.log(2 * 4 == 8);
// в данном случае мы хотим понять, действительно ли 2 умножить на 4 и 8 это одно и тоже
// как итог мы получим булиновое значение true
console.log(2 * 4 == '8');
// но если 8ку сделать строкой, то результат будет тот же, потому что сравнение идет по значению, а не по типу данных
console.log(2 * 4 === '8');
// в данном случае три знака = (===) - это строгое равенство, строгое сравнение, итогом будет false, так как мы уже сравнили типы данных
// _______________________________________________________________________________________________________________________
// следующие операторы И(&&) и ИЛИ(||)
// особенность &&: оператор выдаст правду если оба аргумента будут правдивыми иначе false
// особенность ||: оператору достаточно одного правдивого аргумента, чтобы выдать true
const isChecked = true,
  isClose = true;
console.log(isChecked && isClose);
// итог - true
const isChecked1 = true,
  isClose1 = false;
console.log(isChecked1 && isClose1);
// итог - false
// на БО'ЛЬШЕМ количестве аргументов работают данные операторы по тому же принципу
const isChecked2 = true,
  isClose2 = false;
console.log(isChecked2 || isClose2);
// итог - true
// ____________________________________________________________________________________
// следущий оператор - отрицание !
const isChecked3 = false,
  isClose3 = false;
console.log(!isChecked3 || isClose3);
// поставив перед переменной isChecked3 оператор отрицания !, мы поменяли значение с false на true, как итог true || false = true
console.log(2 + 2 * 2 === 8);
// итог - false, данное содержимое скобок показывает приорететность операторов, т. к. сначала было умножение, а потом сложение, то по левую сторону была 6, а по правую 8, поэтому false
// таблица с ПРИОРЕТНОСТЬЮ ОПЕРАТОРОВ в отдельном файле 
console.log(2 + 2 * 2 != 8);
// итог - true, т.к. 6 не = 8. Еще один пример использования оператора отрицания
console.log(2 + 2 * 2 != '6');
// итог - false, т.к. здесь написано, что 6 не = 6, поэтому false
console.log(2 + 2 * 2 !== '6');
// итог - true, т.к. написано, что число 6 не равно строке 6