"use strict";

let number = 4.6;
// также к числовым значениям относятся infinity и NaN(not a number), первый при деление на 0, второй когда математическая операция не логична 
console.log(-4 / 0);
console.log('string' * 9);

// следующий тип данных - строка, до этого были числа

const persone = "Alex";
// нет разницы какие кавычки использовать, данный вопрос решается стилистикой проекта: '', ""; `` - если использовать косые кавычки, то число можно записать как строку: const persone = `5`;

// следующий тип данных - Логический тип(boolean) или иначе говоря булиновое значение

const bool = true / false;

// следующий тип данных - null и  undefined

// console.log(something);

// при запуске команды получаем: ReferenceError: something is not defined, ошибка ссылочного типа, говорит о том, что мы не можем сослаться на несуществующий объект иначе говоря это и есть null

let and;
console.log(and);

// тут получаем undefined, это когда объект существует, но не имеет какого-либо значения
// если не скрыть строчку 19, то на сайте запуск кода остановится на ней и будет показывать ошибку

// следующий тип данных - объект (комплексный тип данных)
// он может содержать в себе свойства (какие-то данные) и методы (действия)

const obj = {
  name: "Max",
  age: 29,
  isMarried: false,
};

// тут описанны только свойства: name, age, isMarried, про действия см. в след. уроках
// console.log(obj.name);
// console.log(obj[name]); можно использовать вместо точки после obj квадратные скобки, но тогда нужно проставить кавычки, иначе мы обращаемся к переменной name, которой не существует
console.log(obj["name"]);

// следующий тип данных - массив, частный случай объекта (спец. объект)

let arr = ['plum.png', 'orange.jpg', 8, 'apple.bmp', {}, []]
console.log(arr[2]);